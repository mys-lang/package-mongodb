from bson import Document
from bson import encode as bson_encode
from bson import decode as bson_decode
from net.tcp.client import Client as TcpClient

func _pack_u32(data: bytes, offset: i64, value: u32) -> i64:
    data[offset + 0] = u8(value)
    data[offset + 1] = u8(value >> 8)
    data[offset + 2] = u8(value >> 16)
    data[offset + 3] = u8(value >> 24)

    return offset + 4

func _unpack_u32(data: bytes, offset: i64) -> u32:
    return (u32(data[offset + 0])
            | (u32(data[offset + 1]) << 8)
            | (u32(data[offset + 2]) << 16)
            | (u32(data[offset + 3]) << 24))

class Client:
    _client: TcpClient

    func __init__(self):
        self._client = TcpClient()

    func connect(self, host: string = "127.0.0.1", port: u32 = 27017):
        self._client.connect(host, port)

    func disconnect(self):
        self._client.disconnect()

    func run_command(self, command: Document) -> Document:
        """Run given command and returns its response.

        """

        encoded = bson_encode(command)
        header = bytes(21)
        offset = _pack_u32(header, 0, u32(len(header) + len(encoded)))
        offset = _pack_u32(header, offset, 1)
        offset = _pack_u32(header, offset, 0)
        offset = _pack_u32(header, offset, 2013)
        offset = _pack_u32(header, offset, 0)
        header[offset] = 0
        self._client.write(header)
        self._client.write(encoded)
        self._client.read_into(header, 0, len(header))
        length = u64(_unpack_u32(header, 0))
        response = self._client.read(length - len(header))

        return bson_decode(response)
