from bson import Array
from bson import Boolean
from bson import BsonError
from bson import Document
from bson import Int32
from bson import Int64
from bson import String
from bson import decode as bson_decode
from bson import encode as bson_encode
from net.tcp.client import Client as TcpClient

class MongodbError(Error):
    message: string

func _pack_u32(data: bytes, offset: i64, value: u32):
    data[offset + 0] = u8(value)
    data[offset + 1] = u8(value >> 8)
    data[offset + 2] = u8(value >> 16)
    data[offset + 3] = u8(value >> 24)

func _unpack_u32(data: bytes, offset: i64) -> u32:
    return (u32(data[offset + 0])
            | (u32(data[offset + 1]) << 8)
            | (u32(data[offset + 2]) << 16)
            | (u32(data[offset + 3]) << 24))

class Client:
    """A MongoDB client.

    """

    _client: TcpClient

    func __init__(self):
        self._client = TcpClient()

    func connect(self, host: string = "127.0.0.1", port: u32 = 27017):
        """Connect to given server.

        """

        self._client.connect(host, port)

    func disconnect(self):
        """Disconnect from the server.

        """

        self._client.disconnect()

    func list_databases(self) -> [string]:
        """List all databases.

        """

        document = Document([
            ("listDatabases", Int32(1)),
            ("nameOnly", Boolean(True)),
            ("$db", String("admin"))
        ])

        return [
            element.get("name").get_string()
            for element in self.run_command(document).get("databases").get_array()
        ]

    func list_collections(self, database: string) -> [string]:
        """List all collections in given database.

        """

        document = Document([
            ("listCollections", Int32(1)),
            ("nameOnly", Boolean(True)),
            ("$db", String(database))
        ])

        return [
            element.get("name").get_string()
            for element in (self
                            .run_command(document)
                            .get("cursor")
                            .get("firstBatch").get_array())
        ]

    func drop(self, database: string, collection: string):
        """Drop given collection in given database.

        """

        document = Document([
            ("drop", String(collection)),
            ("$db", String(database))
        ])
        self.run_command(document)

    func insert(self, database: string, collection: string, documents: Array):
        """Insert given documents in given collection in given database.

        """

        document = Document([
            ("insert", String(collection)),
            ("documents", documents),
            ("$db", String(database))
        ])
        self.run_command(document)

    func find_many(self,
                   database: string,
                   collection: string,
                   filter: Document = None,
                   sort: Document = None,
                   projection: Document = None) -> [Document]:
        """Find documents in given collection in given database matching given
        filter.

        """

        batch = self.find(database, collection, filter, sort, projection)
        documents: [Document] = []
        documents.extend(batch.get("cursor").get("firstBatch").get_array())
        cursor_id = batch.get("cursor").get("id")

        while cursor_id.get_int64() != 0:
            batch = self.get_more(database, collection, cursor_id)
            cursor_id = batch.get("cursor").get("id")
            documents.extend(batch.get("cursor").get("nextBatch").get_array())

        return documents

    func find(self,
              database: string,
              collection: string,
              filter: Document = None,
              sort: Document = None,
              projection: Document = None) -> Document:
        """Find first batch of documents in given collection in given database
        matching given filter.

        """

        document = Document([
            ("find", String(collection)),
            ("batchSize", Int64(100)),
            ("$db", String(database))
        ])

        if filter is not None:
            document.elements.append(("filter", filter))

        if sort is not None:
            document.elements.append(("sort", sort))

        if projection is not None:
            document.elements.append(("projection", projection))

        return self.run_command(document)

    func get_more(self,
                  database: string,
                  collection: string,
                  cursor_id: Int64) -> Document:
        """Get documents at given cursor id in given collection in given
        database starting. Call find() to get first batch of documents and
        the first cursor.

        """

        document = Document([
            ("getMore", cursor_id),
            ("batchSize", Int64(100)),
            ("collection", String(collection)),
            ("$db", String(database))
        ])

        return self.run_command(document)

    func run_command(self, command: Document) -> Document:
        """Run given command and returns its response.

        """

        encoded = bson_encode(command)
        header = bytes(21)
        _pack_u32(header, 0, u32(len(header) + len(encoded)))
        _pack_u32(header, 4, 1)
        _pack_u32(header, 8, 0)
        _pack_u32(header, 12, 2013)
        _pack_u32(header, 16, 0)
        header[20] = 0
        self._client.write(header)
        self._client.write(encoded)

        if self._client.read_into(header, 0, len(header)) != len(header):
            raise MongodbError("Connection closed.")

        length = u64(_unpack_u32(header, 0))

        if _unpack_u32(header, 12) != 2013:
            raise MongodbError("Unsupported message type.")

        length -= len(header)
        data = self._client.read(length)

        if len(data) != length:
            raise MongodbError("Connection closed.")

        response = bson_decode(data)

        if response.get("ok").get_double() == 0.0:
            message = response.get("errmsg").get_string()
            code = response.get("code").get_int32()
            code_name = response.get("codeName").get_string()

            raise MongodbError(f"Command error: {message} ({code_name}({code}))")

        return response

@test
func test_basic():
    database = "mys-mongodb-test"
    collection = "foo"

    client = Client()
    client.connect()

    try:
        client.drop(database, collection)
    except MongodbError:
        pass

    try:
        client.drop(database, collection)
        assert False
    except MongodbError as error:
        assert "ns not found" in error.message

    client.insert(database,
                  collection,
                  Array([
                      Document([("x", Boolean(True))]),
                      Document([("x", Boolean(False))])
                  ]))
    assert database in client.list_databases()
    assert collection in client.list_collections(database)
    assert len(client.find_many(database, collection)) == 2
    filter = Document([("x", Document([("$eq", Boolean(False))]))])
    projection = Document([("_id", Int32(0))])
    documents = client.find_many(database,
                                 collection,
                                 filter=filter,
                                 projection=projection)
    assert len(documents) == 1
    assert not documents[0].get("x").get_boolean()

    try:
        documents[0].get("_id")
        assert False
    except BsonError:
        pass

    client.disconnect()
