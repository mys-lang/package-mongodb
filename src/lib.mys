from bson import Document
from bson import Int32
from bson import Int64
from bson import String
from bson import Array
from bson import encode as bson_encode
from bson import decode as bson_decode
from net.tcp.client import Client as TcpClient

class MongodbError(Error):
    message: string

func _pack_u32(data: bytes, offset: i64, value: u32):
    data[offset + 0] = u8(value)
    data[offset + 1] = u8(value >> 8)
    data[offset + 2] = u8(value >> 16)
    data[offset + 3] = u8(value >> 24)

func _unpack_u32(data: bytes, offset: i64) -> u32:
    return (u32(data[offset + 0])
            | (u32(data[offset + 1]) << 8)
            | (u32(data[offset + 2]) << 16)
            | (u32(data[offset + 3]) << 24))

class Client:
    """A MongoDB client.

    """

    _client: TcpClient

    func __init__(self):
        self._client = TcpClient()

    func connect(self, host: string = "127.0.0.1", port: u32 = 27017):
        """Connect to given server.

        """

        self._client.connect(host, port)

    func disconnect(self):
        """Disconnect from the server.

        """

        self._client.disconnect()

    func run_command(self, command: Document) -> Document:
        """Run given command and returns its response.

        """

        encoded = bson_encode(command)
        header = bytes(21)
        _pack_u32(header, 0, u32(len(header) + len(encoded)))
        _pack_u32(header, 4, 1)
        _pack_u32(header, 8, 0)
        _pack_u32(header, 12, 2013)
        _pack_u32(header, 16, 0)
        header[20] = 0
        self._client.write(header)
        self._client.write(encoded)
        self._client.read_into(header, 0, len(header))
        length = u64(_unpack_u32(header, 0))

        if _unpack_u32(header, 12) != 2013:
            raise MongodbError("Unsupported message type.")

        response = self._client.read(length - len(header))

        return bson_decode(response)

    func list_databases(self) -> Document:
        """List all databases.

        """

        document = Document([
            ("listDatabases", Int32(1)),
            ("$db", String("admin"))
        ])

        return self.run_command(document)

    func insert(self, database: string, collection: string, documents: [Document]):
        """Insert given objects in given collection in given database.

        """

        array = Array()

        for document in documents:
            array.append(document)

        document = Document([
            ("insert", String(collection)),
            ("documents", array),
            ("$db", String(database))
        ])
        self.run_command(document)

    func find(self,
              database: string,
              collection: string,
              filter: Document = Document()) -> Document:
        """Find objects in given collection in given database.

        """

        document = Document([
            ("find", String(collection)),
            ("filter", filter),
            ("batchSize", Int64(100)),
            ("$db", String(database))
        ])

        return self.run_command(document)

    func get_more(self, database: string,
                  collection: string,
                  cursor_id: Int64) -> Document:
        """Find more objects in given collection in given database.

        """

        document = Document([
            ("getMore", cursor_id),
            ("batchSize", Int64(100)),
            ("collection", String(collection)),
            ("$db", String(database))
        ])

        return self.run_command(document)
